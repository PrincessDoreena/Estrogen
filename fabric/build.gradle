plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {}

dependencies {
    // Fabric
    modImplementation ("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

    // Fapi
    modApi ("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    modApi ("dev.architectury:architectury-fabric:${rootProject.architectury_version}")

    //Create
    modImplementation ("com.simibubi.create:create-fabric-${rootProject.minecraft_version}:${project.create_version}+mc${rootProject.minecraft_version}")

    //Porting Lib
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:transfer:${project.porting_lib_version}"))

    //Trinkets
    modImplementation ("dev.emi:trinkets:${rootProject.trinkets_version}")
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi ("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${project.cardinal_version}")
    }

    // REI
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-api:${rootProject.rei_version}")
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-default-plugin:${rootProject.rei_version}")

    // EMI
    modCompileOnly ("dev.emi:emi-fabric:${rootProject.emi_version}:api")

    //Mod Menu
    modLocalRuntime ("com.terraformersmc:modmenu:${project.modmenu_version}")

    //Mixin Extras
    implementation (include(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras_version}")))

    //Dev Auth
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${rootProject.devauth_version}")

    // Item Viewers
    switch (item_viewer.toLowerCase()) {
        case "rei":
            modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.rei_version}")
            modLocalRuntime("maven.modrinth:createfabricreibugfix:${project.createreibugfix_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${rootProject.emi_version}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${item_viewer} must be REI, EMI or disabled"); break
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    Project common = project(":common")

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    copy {
        from common.file("src/main/generated/data/estrogen/recipes/.fabric")
        include "**/*.json"
        into "src/main/generated/data/estrogen/recipes/"
    }

}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("-fabric")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {}
}

loom {
    Project common = project(":common")
    runs {
        datagen {
            client()
            name "Data Generation (client)"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${common.file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=estrogen"
            vmArg "-Dporting_lib.datagen.existing_resources=${common.file("src/main/resources")}"

            runDir "build/datagen"

        }
    }
}
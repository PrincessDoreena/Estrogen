plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        // location of the maven for Registrate and Flywheel
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // location of the maven for Vazkii's mods
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    /*maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }*/
    maven {
        // location of the maven for Dynamic Trees
        url = 'https://harleyoconnor.com/maven'
    }
    maven {
        // location of the maven for Curios API
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of maven for CC: Tweaked
        name = "squiddev"
        url = "https://squiddev.cc/maven/"
    }

    maven {
        url = 'https://www.cursemaven.com'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    forge ("net.minecraftforge:forge:${rootProject.forge_version}")
    modApi ("dev.architectury:architectury-forge:${rootProject.architectury_version}")

    //Create
    modImplementation("com.simibubi.create:create-${minecraft_version}:${rootProject.create_version_forge}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${rootProject.registrate_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${rootProject.flywheel_version}")

    //Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}"))

    //Dev Auth
    modRuntimeOnly("me.djtheredstoner:DevAuth-forge-latest:${rootProject.devauth_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("-forge")
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def generatedResources = file("src/main/generated")

loom {
    runs {
        data {
            data()
            programArgs "--all", "--mod", modid
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }
}

sourceSets {
    main {
        resources.srcDir "src/main/generated"
    }
}